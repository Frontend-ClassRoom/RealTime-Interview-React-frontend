{"version":3,"sources":["../node_modules/peerjs/dist sync","Main.js","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","socket","io","connect","myPeer","Peer","undefined","host","port","Main","roomId","videoRef","useRef","console","log","peers","on","emit","userId","useEffect","fetch","method","headers","then","response","navigator","mediaDevices","getUserMedia","video","audio","stream","addVideoStream","myVideo","call","answer","document","createElement","userVideoStream","length","remove","connectToNewUser","srcObject","addEventListener","play","current","append","muted","VideoGrid","ref","styled","div","App","useState","setRoomId","uuidv4","path","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gFAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,uKCHnBC,EAASC,IAAGC,QAAQ,KACpBC,EAAS,IAAIC,SAAKC,EAAW,CACjCC,KAAM,IACNC,KAAM,SAiFOC,EA9EF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACRC,EAAWC,iBAAO,MAGxBC,QAAQC,IAAI,eAAgBJ,EAFxBK,WAIJX,EAAOY,GAAG,QAAQ,SAAChB,GACjBa,QAAQC,IAAI,UAAWd,GACvBC,EAAOgB,KAAK,YAAaP,EAAQV,MAGnCC,EAAOe,GAAG,kBAAkB,SAACE,GAC3BL,QAAQC,IAAI,iBAAkBI,MAGhCC,qBAAU,WACRC,MAAM,QAAD,OAASV,EAAT,KAAoB,CACvBW,OAAQ,OACRC,QAAS,CACP,eAAgB,sBAEjBC,MAAK,SAACC,GAAD,OAAcX,QAAQC,IAAIU,QACjC,CAACd,IAEJS,qBAAU,WACRM,UAAUC,aACPC,aAAa,CACZC,OAAO,EACPC,OAAO,IAERN,MAAK,SAACO,GACLC,EAAeC,EAASF,GAExB1B,EAAOY,GAAG,QAAQ,SAACiB,GACjBA,EAAKC,OAAOJ,GACZ,IAAMF,EAAQO,SAASC,cAAc,SACrCH,EAAKjB,GAAG,UAAU,SAACqB,GACjBxB,QAAQC,IAAI,aAAcuB,EAAgBC,QAC1CP,EAAeH,EAAOS,SAI1BpC,EAAOe,GAAG,kBAAkB,SAACE,IASnC,SAA0BA,EAAQY,GAChC,IAAMG,EAAO7B,EAAO6B,KAAKf,EAAQY,GAC3BF,EAAQO,SAASC,cAAc,SACrCH,EAAKjB,GAAG,UAAU,SAACqB,GACjBN,EAAeH,EAAOS,MAExBJ,EAAKjB,GAAG,SAAS,WACfY,EAAMW,YAfFC,CAAiBtB,EAAQY,WAG9B,IAEH,IAAME,EAAUG,SAASC,cAAc,SAgBvC,SAASL,EAAeH,EAAOE,GAAS,IAAD,EACrCF,EAAMa,UAAYX,EAClBF,EAAMc,iBAAiB,kBAAkB,WACvCd,EAAMe,UAER,UAAAhC,EAASiC,eAAT,SAAkBC,OAAOjB,GAG3B,OAvBAI,EAAQc,OAAQ,EAwBd,mCACE,cAACC,EAAD,CAAWC,IAAKrC,OAMhBoC,EAAYE,IAAOC,IAAV,2FCnEAC,MAjBf,WACE,MAA4BC,qBAA5B,mBAAO1C,EAAP,KAAe2C,EAAf,KAKA,OAHAlC,qBAAU,WACRkC,EAAUC,iBACT,IAED,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUC,KAAK,IAAIC,GAAE,UAAK9C,OAG5B,cAAC,EAAD,CAAMA,OAAQA,QCPL+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,SAM1BX,M","file":"static/js/main.123dd0eb.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 89;","import io from \"socket.io-client\";\nimport styled from \"styled-components\";\nimport { useEffect, useRef, useState } from \"react\";\nimport Peer from \"peerjs\";\n\nconst socket = io.connect(\"/\");\nconst myPeer = new Peer(undefined, {\n  host: \"/\",\n  port: \"3001\",\n});\n\nconst Main = ({ roomId }) => {\n  const videoRef = useRef(null);\n  let peers;\n\n  console.log(\"front roomId\", roomId, peers);\n\n  myPeer.on(\"open\", (id) => {\n    console.log(\"peer id\", id);\n    socket.emit(\"join-room\", roomId, id);\n  });\n\n  socket.on(\"user-connected\", (userId) => {\n    console.log(\"user connected\", userId);\n  });\n\n  useEffect(() => {\n    fetch(`/api/${roomId}/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((response) => console.log(response));\n  }, [roomId]);\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true,\n      })\n      .then((stream) => {\n        addVideoStream(myVideo, stream);\n\n        myPeer.on(\"call\", (call) => {\n          call.answer(stream);\n          const video = document.createElement(\"video\");\n          call.on(\"stream\", (userVideoStream) => {\n            console.log(\"userStream\", userVideoStream.length);\n            addVideoStream(video, userVideoStream);\n          });\n        });\n\n        socket.on(\"user-connected\", (userId) => {\n          connectToNewUser(userId, stream);\n        });\n      });\n  }, []);\n\n  const myVideo = document.createElement(\"video\");\n  myVideo.muted = true;\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream);\n    const video = document.createElement(\"video\");\n    call.on(\"stream\", (userVideoStream) => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on(\"close\", () => {\n      video.remove();\n    });\n\n    // peers[userId] = call;\n  }\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener(\"loadedmetadata\", () => {\n      video.play();\n    });\n    videoRef.current?.append(video);\n  }\n\n  return (\n    <>\n      <VideoGrid ref={videoRef} />\n    </>\n  );\n};\nexport default Main;\n\nconst VideoGrid = styled.div`\n  video {\n    width: 400px;\n    display: inline-block;\n  }\n`;\n","import { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useState, useEffect } from \"react\";\n\n// internal import\nimport Main from \"./Main\";\n\nfunction App() {\n  const [roomId, setRoomId] = useState();\n\n  useEffect(() => {\n    setRoomId(uuidv4());\n  }, []);\n  return (\n    <>\n      <Router>\n        <Redirect path=\"*\" to={`${roomId}`} />\n        {/* <Route component={<Main roomId={roomId} />}></Route> */}\n      </Router>\n      <Main roomId={roomId} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}